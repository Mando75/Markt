mutation startNewExperiment($sceID: ID!, $guID: ID!) {
  startNewExperiment(params: { scenarioId: $sceID, guideId: $guID }) {
    id
    joinCode
  }
}

mutation startNextSession($expId: ID!) {
  startNextSession(experimentId: $expId) {
    id
    experiment{
    ...experimentFragment
    }
    sessionNumber
    scenarioSession {
      instructions {
        step
        header
        bullets {
          format
          text
        }
      }
    }
  }
}

mutation endExperiment($expId: ID!) {
  endExperiment(experimentId: $expId) {
    ...experimentFragment
  }
}


fragment instructionsFragment on Instructions {
  step
  header
  bullets {
    format
    text
  }
}

fragment scenarioFragment on Scenario {
  id
  name
  description
  instructions {
    ...instructionsFragment
  }
  maxPlayerSize
}

query scenario($code: ID!) {
  scenario(code: $code) {
    ...scenarioFragment
  }
}
#Here are the subscriptions
query experimentPlayerCount($experimentId: ID!) {
  experimentPlayerCount: experiment(id: $experimentId) {
    id
    joinCode
    numPlayers
  }
}

subscription experimentPlayerCountChanged($experimentId: ID!) {
  playerJoinedExperiment(experimentId: $experimentId) {
    id
    numPlayers
    joinCode
  }
}

query experimentStatus($experimentId: ID!) {
  experimentStatus: experiment(id: $experimentId) {
    id
    joinCode
    active
    status
  }
}

subscription experimentStatusChanged($experimentId: ID!) {
  experimentStatusChanged(experimentId: $experimentId) {
    id
    numPlayers
    status
    active
    joinCode
  }
}

query experimentHubController($experimentId: ID!) {
  experiment(id: $experimentId) {
    id
    joinCode
    scenario {
      ...scenarioFragment
    }
    status
    numPlayers
    activeSession {
      id
      sessionNumber
      scenarioSession {
        id
        instructions {
          ...instructionsFragment
        }
        roundDiscussionPoints {
          ...instructionsFragment
        }
        numberOfRounds
      }
    }
    activeRound {
      id
      roundNumber
      averagePrice
      numTransactions
    }
  }
}

fragment experimentFragment on Experiment {
  id
  status
  activeSession {
    id
    sessionNumber
    active
  }
  activeRound {
    id
    roundNumber
    active
  }
}

query activeExperimentList($scenarioId: ID) {
  me {
    id
    guide {
      id
      experiments(active: true, scenarioId: $scenarioId) {
        id
        updatedDate
        numPlayers
        joinCode
        status
      }
    }
  }
}

query myself {
  me {
    id
    fullName
    emailConfirmed
    acceptedTos
    guide {
      id
      experiments {
        id
        closed
        updatedDate
        scenario {
          name
        }
      }
    }
  }
}

mutation startNextRound($expId: ID!) {
  startNextRound(experimentId: $expId) {
    id
    numTransactions
    averagePrice
  }
}

mutation endCurrentRound($expId: ID!) {
  endCurrentRound(experimentId: $expId) {
    numTransactions
    averagePrice
    maxPrice
    minPrice
  }
}

